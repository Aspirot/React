{"ast":null,"code":"import _regeneratorRuntime from \"E:\\\\Workspace\\\\React\\\\React_Project\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"E:\\\\Workspace\\\\React\\\\React_Project\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:\\\\Workspace\\\\React\\\\React_Project\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\Workspace\\\\React\\\\React_Project\\\\frontend\\\\src\\\\UpdateTask.js\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nexport default function UpdateTask() {\n  var _this = this;\n\n  var nav = useNavigate();\n\n  var _useParams = useParams(),\n      taskId = _useParams.taskId;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      description = _useState4[0],\n      setDescription = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      status = _useState6[0],\n      setStatus = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      hasUpdated = _useState8[0],\n      setHasUpdated = _useState8[1];\n\n  var statusOptions = [\"In Progress\", \"Completed\"];\n  useEffect(function () {\n    function fetchTask() {\n      return _fetchTask.apply(this, arguments);\n    }\n\n    function _fetchTask() {\n      _fetchTask = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var baseURL;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!taskId) {\n                  _context.next = 4;\n                  break;\n                }\n\n                baseURL = 'http://localhost:8082/tasks';\n                _context.next = 4;\n                return axios.get(\"\".concat(baseURL, \"/\").concat(taskId)).then(function (resp) {\n                  setTitle(resp.data.title);\n                  setDescription(resp.data.description);\n                  setStatus(resp.data.status);\n                });\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _fetchTask.apply(this, arguments);\n    }\n\n    fetchTask();\n  }, [taskId]);\n\n  function update() {\n    return _update.apply(this, arguments);\n  }\n\n  function _update() {\n    _update = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var baseURL, updatedTask;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(title && description && status)) {\n                _context2.next = 5;\n                break;\n              }\n\n              baseURL = 'http://localhost:8082/tasks/updateTask';\n              updatedTask = {\n                title: title,\n                description: description,\n                status: status\n              };\n              _context2.next = 5;\n              return axios.put(\"\".concat(baseURL, \"/\").concat(taskId), updatedTask).then(function () {\n                setHasUpdated(true);\n                console.log(updatedTask);\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _update.apply(this, arguments);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, \"Update a task\"), title && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }, \"Title :\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: title,\n    onChange: function onChange(event) {\n      return setTitle(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, \"Description :\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: description,\n    onChange: function onChange(event) {\n      return setDescription(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, \"Status :\", /*#__PURE__*/React.createElement(\"select\", {\n    type: \"text\",\n    value: status,\n    onChange: function onChange(event) {\n      return setStatus(event.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  }, statusOptions.map(function (o) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      value: o,\n      key: o,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 25\n      }\n    }, o);\n  }))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"update\",\n    onClick: update,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, \"Update\")), !title && /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 24\n    }\n  }, \"There is no task with this id\"), hasUpdated && /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, \"Task has been updated!\"), /*#__PURE__*/React.createElement(\"h5\", {\n    onClick: function onClick() {\n      nav(\"/\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"Go to home\"));\n}","map":{"version":3,"sources":["E:/Workspace/React/React_Project/frontend/src/UpdateTask.js"],"names":["axios","React","useEffect","useState","useNavigate","useParams","UpdateTask","nav","taskId","title","setTitle","description","setDescription","status","setStatus","hasUpdated","setHasUpdated","statusOptions","fetchTask","baseURL","get","then","resp","data","update","updatedTask","put","console","log","event","target","value","map","o"],"mappings":"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","sourcesContent":["import axios  from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\"\r\n\r\nexport default function UpdateTask(){\r\n    let nav = useNavigate();\r\n    let {taskId} = useParams();\r\n    const [title,setTitle] = useState('')\r\n    const [description,setDescription] = useState('')\r\n    const [status,setStatus] = useState('')\r\n    const [hasUpdated,setHasUpdated] = useState(false)\r\n    const statusOptions = [\"In Progress\",\"Completed\"]\r\n\r\n    useEffect(() => { async function fetchTask(){\r\n        if(taskId){\r\n            const baseURL = 'http://localhost:8082/tasks';\r\n            await axios.get(`${baseURL}/${taskId}`)\r\n            .then((resp) => {setTitle(resp.data.title);setDescription(resp.data.description);setStatus(resp.data.status)})}\r\n     }\r\n     fetchTask()\r\n    },[taskId])\r\n\r\n    async function update(){\r\n        if(title && description && status){\r\n            const baseURL = 'http://localhost:8082/tasks/updateTask';\r\n            const updatedTask = { title:title,description:description,status:status};\r\n            await axios.put(`${baseURL}/${taskId}`,updatedTask)\r\n                .then(() => {setHasUpdated(true);console.log(updatedTask)})\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>Update a task</h1>\r\n            {title &&\r\n            <div>\r\n                <label>\r\n                Title : \r\n                <input type=\"text\" value={title} onChange={event => setTitle(event.target.value)}/>\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Description : \r\n                <input type=\"text\" value={description} onChange={event => setDescription(event.target.value)} />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Status : \r\n                <select type=\"text\" value={status} onChange={event => setStatus(event.target.value)}>\r\n                    {statusOptions.map(o => (\r\n                        <option value={o} key={o}>{o}</option>\r\n                    ))}\r\n                </select>\r\n            </label>\r\n            <br/>\r\n            <button type=\"update\" onClick={update}>Update</button>\r\n            </div>}\r\n            {!title && <h3>There is no task with this id</h3>}\r\n            {hasUpdated && \r\n            <h3>Task has been updated!</h3>}\r\n            <h5 onClick={() => {nav(\"/\");}}>Go to home</h5>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}