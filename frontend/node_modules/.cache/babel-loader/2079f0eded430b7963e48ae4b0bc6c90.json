{"ast":null,"code":"var _jsxFileName = \"E:\\\\Workspace\\\\React\\\\React_Project\\\\frontend\\\\src\\\\UpdateTask.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function UpdateTask() {\n  _s();\n\n  let nav = useNavigate();\n  let {\n    taskId\n  } = useParams();\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [status, setStatus] = useState('');\n  const [hasUpdated, setHasUpdated] = useState(false);\n  const statusOptions = [\"In Progress\", \"Completed\"];\n  useEffect(() => {\n    async function fetchTask() {\n      if (taskId) {\n        const baseURL = 'http://localhost:8082/tasks';\n        await axios.get(`${baseURL}/${taskId}`).then(resp => {\n          setTitle(resp.data.title);\n          setDescription(resp.data.description);\n          setStatus(resp.data.status);\n        });\n      }\n    }\n\n    fetchTask();\n  });\n\n  async function update() {\n    if (title && description && status) {\n      const baseURL = 'http://localhost:8082/tasks/updateTask';\n      const updatedTask = {\n        title: title,\n        description: description,\n        status: status\n      };\n      await axios.put(`${baseURL}/${taskId}`, updatedTask).then(() => {\n        setHasUpdated(true);\n        console.log(updatedTask);\n      });\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Update a task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), title && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Title :\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: title,\n          onChange: event => setTitle(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Description :\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: description,\n          onChange: event => setDescription(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Status :\", /*#__PURE__*/_jsxDEV(\"select\", {\n          type: \"text\",\n          value: status,\n          onChange: event => setStatus(event.target.value),\n          children: statusOptions.map(o => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: o,\n            children: o\n          }, o, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"update\",\n        onClick: update,\n        children: \"Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), !title && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"There is no task with this id\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 24\n    }, this), hasUpdated && /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Task has been updated!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      onClick: () => {\n        nav(\"/\");\n      },\n      children: \"Go to home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UpdateTask, \"pE5tKMWpOfRRgbpuPdK+MOVYqKE=\", false, function () {\n  return [useNavigate, useParams];\n});\n\n_c = UpdateTask;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateTask\");","map":{"version":3,"sources":["E:/Workspace/React/React_Project/frontend/src/UpdateTask.js"],"names":["axios","useEffect","useState","useNavigate","useParams","UpdateTask","nav","taskId","title","setTitle","description","setDescription","status","setStatus","hasUpdated","setHasUpdated","statusOptions","fetchTask","baseURL","get","then","resp","data","update","updatedTask","put","console","log","event","target","value","map","o"],"mappings":"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","sourcesContent":["import axios  from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\"\r\n\r\nexport default function UpdateTask(){\r\n    let nav = useNavigate();\r\n    let {taskId} = useParams();\r\n    const [title,setTitle] = useState('')\r\n    const [description,setDescription] = useState('')\r\n    const [status,setStatus] = useState('')\r\n    const [hasUpdated,setHasUpdated] = useState(false)\r\n    const statusOptions = [\"In Progress\",\"Completed\"]\r\n\r\n    useEffect(() => { async function fetchTask(){\r\n        if(taskId){\r\n            const baseURL = 'http://localhost:8082/tasks';\r\n            await axios.get(`${baseURL}/${taskId}`)\r\n            .then((resp) => {setTitle(resp.data.title);setDescription(resp.data.description);setStatus(resp.data.status)})}\r\n     }\r\n     fetchTask()\r\n    })\r\n\r\n    async function update(){\r\n        if(title && description && status){\r\n            const baseURL = 'http://localhost:8082/tasks/updateTask';\r\n            const updatedTask = { title:title,description:description,status:status};\r\n            await axios.put(`${baseURL}/${taskId}`,updatedTask)\r\n                .then(() => {setHasUpdated(true);console.log(updatedTask)})\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h1>Update a task</h1>\r\n            {title &&\r\n            <div>\r\n                <label>\r\n                Title : \r\n                <input type=\"text\" value={title} onChange={event => setTitle(event.target.value)}/>\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Description : \r\n                <input type=\"text\" value={description} onChange={event => setDescription(event.target.value)} />\r\n            </label>\r\n            <br/>\r\n            <label>\r\n                Status : \r\n                <select type=\"text\" value={status} onChange={event => setStatus(event.target.value)}>\r\n                    {statusOptions.map(o => (\r\n                        <option value={o} key={o}>{o}</option>\r\n                    ))}\r\n                </select>\r\n            </label>\r\n            <br/>\r\n            <button type=\"update\" onClick={update}>Update</button>\r\n            </div>}\r\n            {!title && <h3>There is no task with this id</h3>}\r\n            {hasUpdated && \r\n            <h3>Task has been updated!</h3>}\r\n            <h5 onClick={() => {nav(\"/\");}}>Go to home</h5>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}